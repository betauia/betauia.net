---
const routes = [
  { name: "Interessegrupper", path: "/grupper" },
  { name: "Arrangementer", path: "/arrangementer" },
  { name: "Ny student", path: "/ny-student" },
  { name: "For bedrifter", path: "/bedrifter" },
  { name: "Kalender", path: "/kalender" },
];

const isCurrentRoute = (path: string) => {
  return Astro.url.pathname === path;
};
---

<nav class="bg-white dark:bg-gray-900 absolute w-full shadow-lg">
  <div class="mx-auto max-w-7xl px-2 sm:px-6 lg: px-8">
    <div class="relative flex h-16 items-center justify-between">
      <div class="absolute inset-y-0 right-0 flex items-center sm:hidden">
        <!-- Mobile menu button -->
        <button type="button" id="mobile-menu-toggle" class="relative inline-flex items-center justify-center rounded-md p-2 text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus:ring-brand" aria-controls="movile-menu" aria-expanded="false">
          <span class="absolute -inset-0.5"></span>
          <span class="sr-only">Open main menu</span>

          <!-- Menu open: "hidden", Menu closed: "block" -->

          <!-- Icon when menu is closed -->
          <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
          </svg>

          <!-- Icon when menu is open -->
          <svg class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>

        </button>
      </div>

      <div class="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
        <div class="flex flex-shrink-0 items-center">
          <a href="/"><img class="h-auto w-24" src="/imgs/Beta_blue_1.png" alt="BETA logo"></a>
        </div>

        <!-- Landscape menu -->
        <div class="hidden sm:ml-6 sm:block">
          <div class="flex space-x-4">

            <!-- Maps out the active route from array -->
            {routes.map(route => (
              <a
                href={route.path}
                class={`transition rounded-md px-3 py-2 text-sm text-gray-900 dark:text-white ${isCurrentRoute(route.path) ? "opacity-75 hover:opacity-100" : "hover:opacity-75"}`}
              >
                {route.name}
              </a>
            ))}
          </div>
      </div>
    </div>

    <!-- Theme toggle button -->
    <div class="absolute left-0 flex items-center sm:right-0 sm:left-auto">
      <button id="theme-toggle" type="button" class="text-gray-600 dark:text-gray-400 rounded-md text-sm p-2.5  hover:bg-gray-100 dark:hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus:ring-brand">

        <!-- Icon when dark mode is enabled -->
        <svg id="dark-toggle-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
        </svg>

        <!-- Icon when light mode is enabled -->
        <svg id="light-toggle-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile menu, shows on small -->
  <div class="sm:hidden" id="mobile-menu">
    <div class="space-y-1 px-2 pb-3 pt-2">
      <!-- Maps out the active route from array -->
      {routes.map(route => (
        <a href={route.path} class={`transition block rounded-md px-3 py-2 text-sm hover:text-gray-600 dark:hover:text-gray-300 dark:hover:text-brand ${isCurrentRoute(route.path) ? "text-gray-600 dark:text-gray-400" : "text-gray-900 dark:text-white "}`}>
          {route.name}
        </a>
      ))}
    </div>
  </div>
</nav>

<!-- Adds toggle event for the mobile menu -->
<script>
  let menuToggleBtn = document.getElementById("mobile-menu-toggle");
  let menu = document.getElementById("mobile-menu");

  if (menu && menuToggleBtn) {
    menu.classList.add("hidden");
    
    menuToggleBtn.addEventListener("click", () => {
      menu.classList.toggle("hidden");
    });
  }
</script>

<!-- Toggle dark/light theme -->
<script>
  let darkToggleIcon = document.getElementById("dark-toggle-icon");
  let lightToggleIcon = document.getElementById("light-toggle-icon");
  let themeToggleBtn = document.getElementById("theme-toggle");

  // Check if darktheme was enabled or system preferes it
  if (darkToggleIcon && lightToggleIcon && themeToggleBtn) {
    if (localStorage.getItem("color-theme") === "dark" || (!("color-theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)) {
      darkToggleIcon.classList.remove("hidden");
    } else {
      lightToggleIcon.classList.remove("hidden");
    }

    themeToggleBtn.addEventListener("click", () => {

      // Toggle icons inside button
      darkToggleIcon.classList.toggle("hidden");
      lightToggleIcon.classList.toggle("hidden");

      // If set via local storage previously
      if (localStorage.getItem("color-theme")) {
        if (localStorage.getItem("color-theme") === "light") {
          document.documentElement.classList.add("dark");
          localStorage.setItem("color-theme", "dark");
        } else {
          document.documentElement.classList.remove("dark");
          localStorage.setItem("color-theme", "light");
        }

      } else {
        if (document.documentElement.classList.contains("dark")) {
          document.documentElement.classList.remove("dark");
          localStorage.setItem("color-theme", "light");
        } else {
          document.documentElement.classList.add("dark");
           localStorage.setItem("color-theme", "dark");
        }
      }
    });
  }
</script>


