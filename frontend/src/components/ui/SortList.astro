---
import { Icon } from "astro-icon/components";
interface Pdf {
  name: string | undefined;
  href: string | undefined;
  year: string | undefined;
  examNumber: string | undefined;
  score: string | undefined;
  subject: string | undefined;
}

export interface Props {
  files: Pdf[];
}

const { files } = Astro.props as Props;
---

<div class="rounded border-x-2 border-b-2 border-brand text-black dark:text-white">
  <table class="w-full table-fixed" id="examTable">
    <tr style="background-color:#0085ff">
      <th class="select-none text-center align-middle text-white">Fil</th>
      <th
        onclick="sortTable(1)"
        class="select-none text-center align-middle font-bold text-white hover:bg-blue-600"
        style="cursor: pointer">Score</th
      >
      <th
        onclick="sortTable(2)"
        class="select-none text-center align-middle font-bold text-white hover:bg-blue-600"
        style="cursor: pointer">Del</th
      >
      <th
        onclick="sortTable(3)"
        class="select-none text-center align-middle font-bold text-white hover:bg-blue-600"
        style="cursor: pointer">Ã…r</th
      >
    </tr>
    {
      files.map((file: Pdf) => {
        return (
          <tr class="odd:bg-white even:bg-gray-100 hover:bg-gray-400 dark:odd:bg-gray-900 dark:even:bg-gray-800 dark:hover:bg-gray-950">
            <td class="flex items-center justify-center px-4 text-center">
              <a href={file.href} download>
                <div class="my-2 flex w-fit cursor-pointer flex-row items-center justify-center gap-2 rounded border-2 border-brand bg-brand px-2 py-1 transition hover:border-blue-600 hover:bg-blue-600">
                  <Icon name="fa-solid:file-download" />
                  Last ned
                </div>
              </a>
            </td>
            <td class="text-center">
              <div>{file.score}%</div>
            </td>
            <td class="text-center">
              <div>{file.examNumber}</div>
            </td>
            <td class="text-center">
              <div>{file.year}</div>
            </td>
          </tr>
        );
      })
    }
  </table>
</div>

<script>
  const sortedColumns: Record<number, string | string | null> = {
    1: null,
    2: null,
    3: null,
  };
  // @ts-ignore
  window.sortTable = function (columnIndex: number) {
    const table = document.getElementById("examTable") as HTMLTableElement;
    const tbody = table.tBodies[0];
    const rows = Array.from(tbody.rows).slice(1);
    if (rows.length == 0) {
      alert("Table is empty");
      return;
    }
    const currentDirection: string | null = sortedColumns[columnIndex];
    const newDirection: string = currentDirection === "desc" ? "asc" : "desc";
    sortedColumns[columnIndex] = newDirection;

    let sortedRows = rows.sort((a: HTMLTableRowElement, b: HTMLTableRowElement) => {
      const cellA: string = a.cells[columnIndex].innerText.trim();
      const cellB: string = b.cells[columnIndex].innerText.trim();

      const cellNumA: number = parseFloat(cellA);
      const cellNumB: number = parseFloat(cellB);

      if (!isNaN(cellNumA) && !isNaN(cellNumB)) {
        return newDirection === "asc" ? cellNumA - cellNumB : cellNumB - cellNumA;
      } else {
        return newDirection === "asc" ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
      }
    });
    sortedRows.forEach(row => tbody.appendChild(row));
  };
</script>
